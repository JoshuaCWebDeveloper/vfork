

               JAVA ELLIPTIC CURVE NATIVE

This package allows invoking native elliptic curve code, based on the
GMP library, for simultaneous or fixed base modular exponentiation and
primality testing, from within a Java application. This drastically
improves the speed of such operations compared to pure Java
implementations.

For details of simultaneous exponentiation, a good source is Handbook
of Applied Cryptography, Menezes, Oorshot, and Vanstone, which is
available for free at http://www.cacr.math.uwaterloo.ca/hac.


                      BUILDING

The source consists of both Java and C code. The Java source
essentially provides a wrapper of the functionality implemented in C
on top of GMP using Java Native Interface (JNI).

Building has only been tested with GMP 4.2.4 or later. Then
LIBRARY_PATH must point to libgmp.la and C_INCLUDE_PATH must point to
gmp.h. This is usually the case automatically after installing GMP.

The javah command also needs to find the header files (jni.h and
jni_md.h). The building scripts attempts to find these files
automatically, but if this fails you need to add their locations to
C_INCLUDE_PATH.

Then use

        shell> ./configure
        shell> make

to build the library.


                      INSTALL

1) Use

        shell> make install

   to install the library libjecn_ECN.{la,a,so} and the jar-file
   jecn.jar in the standard locations. See INSTALL for details on
   other ways to invoke ./configure, e.g., to use a user-local
   installation.

2) You should also make sure that the newly installed jar-file is
   found by java by updating your CLASSPATH. You can use the following
   snippet in your init script.

       export CLASSPATH=/usr/local/share/java/jecn.jar:${CLASSPATH}

3) You need to tell the JVM where your native library, i.e.,
   libjecn.{la,a,so} can be found. You may either pass the location
   using the java.library.path property, e.g.,

        shell> java -Djava.library.path=/usr/local/lib/

   or you can set the shell variable LD_LIBRARY_PATH once and for all
   in an init file, e.g.,

        export LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}



                     API DOCUMENTATION

Finally, you may use
 
        shell> make doc

to build also some Javadoc-documentation. This is not installed
anywhere. It remains in your source directory, but you can of course
copy it to any location.



                        REPORTING BUGS

If you find a bug in the library, which does not originate within GNU MP
itself, please make sure to tell us about it!

Report bugs to dog@csc.kth.se, and please follow the advice provided
in the GNU MP for how to submit bugs.
